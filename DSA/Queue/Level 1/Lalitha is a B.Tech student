#include<iostream>
using namespace std; 
   
class Queue { 
    public:
    int rear, front; 
    int size; 
    int *circular_queue; 
   
    Queue(int sz) { 
       front = rear = -1; 
       size = sz; 
       circular_queue = new int[sz]; 
    } 
   void enQueue(int elem); 
    int deQueue(); 
    void displayQueue(); 
}; 

void Queue::enQueue(int elem) 
{ 
 
     
    if (front == -1) {    
         front = rear = 0; 
        circular_queue[rear] = elem; 
    } 
   else if (rear == size-1 && front != 0) { 
        rear = 0; 
        circular_queue[rear] = elem; 
    } 
    else {  
        rear++; 
        circular_queue[rear] = elem; 
    } 
}
int Queue::deQueue() 
{ 
   
    int data = circular_queue[front]; 
    circular_queue[front] = -1; 
    if (front == rear)  { 
        front = -1; 
        rear = -1; 
    } 
    else if (front == size-1) 
        front = 0; 
    else front++; 
   
    return data; 
} 

void Queue::displayQueue() 
{ 
    cout<<"Elements in Circular Queue are:"; 
    if (rear >= front) { 
        for (int i = front; i < rear; i++) 
            cout<<circular_queue[i]<<" ";
           cout<<circular_queue[rear]<<endl;
    } 
    else  { 
        for (int i = front; i<size; i++) 
            cout<<circular_queue[i]; 
   
        for (int i = 0; i <= rear; i++) 
            cout<<circular_queue[i]; 
    } 
} 
int main() 
{ 
    int n,x;
    cin>>n;
    Queue pq(n); 
    for(int i=0;i<n;++i){
        cin>>x;
        pq.enQueue(x); } 
    pq.displayQueue(); 
    cout<<"Deleted value = "<<pq.deQueue(); 
    cout<<"\nDeleted value = "<<pq.deQueue(); 
    pq.displayQueue(); 
    return 0; 
   cout<<"void enQueue(Queue* q,int value)int deQueue(Queue* q)void displayQueue(struct Queue* q)";
}
