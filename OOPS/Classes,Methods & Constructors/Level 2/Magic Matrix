/*Question description:
Before the start of the Hockey season in Australia a strange magic ritual is held. 
The most experienced magicians have to find a magic matrix of the size n × n (n is even number). 
Gods will never allow to start the championship without it.
Matrix should contain integers from 0 to n - 1, main diagonal should contain only zeroes and matrix should be symmetric. 
Moreover, all numbers in each row should be different. 
Magicians are very tired of the thinking process, so they ask you to write a program to find such matrix.
Constraints:
2 ≤ n ≤ 1000
Input Format:
The first line contains one integer n. n is even.
Output Format:
Output n lines with n numbers each the required matrix. Separate numbers with spaces.*/

#include <iostream>
using namespace std;

class Ritual{
public:int Magic(int n){
    cin >> n;
    int M[n][n];
    for(int i = 0;i < n - 1;++i)
        for(int j = 0;j < n - 1;++j)
            M[i][j] = 1 + (i + j+2) % (n - 1);
            
    for(int i = 0;i < n - 1;++i)
        M[i][n - 1] = M[n - 1][i] = M[i][i];
    
    for(int i = 0;i < n;++i){
        for(int j = 0;j < n;++j){ 
           M[i][i]=0;
        cout << M[i][j]<< ' ';}
        cout <<'\n';
    }
    return n;
    
}
};
int main(){
    int n=0;
    Ritual find;
    find.Magic(n);

}
